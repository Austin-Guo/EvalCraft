There are various ways to perform a binding time analysis, but a promising technique is to use a 2-level language: a language that incorporates binding time information inside its types.
In the third section we relate the operational semantics and the denotational model given, and show an adequacy theorem asserting that the model not only gives the same results, but also preserves the phase distinction from the operational semantics.
Note that the dynamic if-then-else requires all the arguments to be dynamic; this is to avoid, for example, static terms like whose evaluation would depend on the evaluation of the dynamic term D.
But a careful analysis of M reveals the presence of a sub-term, sund , that does not terminate at compile-time, and because we are in the setting of partial evaluation we should try to reduce it, causing non-termination during the compilation of M . Conversely, the term can be statically reduced to 0, although it has an innite reduction sequence.
The discussion above suggests that a term can be reduced dynamically only if it can be compiled; in other words terms that do not have a terminating static reduction should not be reduced dynamically.
In this view, the type nat contains two elements apart from natural numbers: ? is intended to interpret terms like lift(sund) and indicate failure during the compilation phase, while ? is intended to interpret terms like dund that do not terminate when exe- cuted.
By denition for each i 2 !, c i (a) . t 2 induction hypothesis ( F F The following lemma is valid in general for open terms, but in the particular case of closed terms it states that the interpretation of a term is related with the term itself.
The category CPO ! is cartesian closed, where the product is dened point-wise, and the exponential object (X; A; p) ) (Y; B; q) is where  1 is the rst projection, and the order in the upper CPO is dened as the conjunction of the two orders between functions.
