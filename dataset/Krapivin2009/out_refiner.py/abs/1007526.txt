The algorithm starts execution of a method on inputs with uninitialized elds and uses lazy initialization to assign values to these elds, i.e. it initializes elds when they are rst accessed during the method's symbolic execution.
Although we concentrate in this paper on the analysis of sequential code, it is worth mentioning that our symbolic execution framework handles concurrency, as it uses the model checker to systematically analyze thread inter- leavings.
By restricting the way nodes are colored on a path from the root to a leaf, red-black trees ensure that the tree is balanced, i.e. guarantee that basic dynamic set operations on a red-black tree take O(log n) time in the worst case.
The (implicit) precondition for both put and remove methods requires the input to satisfy its class invariant (i.e. repOk): the input must be a red-black tree.
Note that the Java semantics do not allow object allocation to dictate the exact object identities, which implies that initializing a test input (at the concrete representation level by setting eld values or at the abstract level using a sequence of method invocations) more than once (say for regression testing) does not generate identical structures but it generates isomorphic structures.
Resources % Coverage N Time Mem States del xD xI 28 3 2.4 2.3 730 68 5 75 6 Out of Memory  Table  1: Model Checking as Testing All results were obtained using the JPF model checker (version 3.1.1) on a 2.2 Ghz dual processor Pentium with 1 Gb of memory running Windows 2000 with Java 1.4.2.
The fact that in the white-box approach only 11 test inputs are required versus the 84 to obtain the same (optimal) coverage in the black-box approach illustrates the power of using a goal-directed white-box approach over a blind black-box approach to test input generation for obtaining high coverage.
Although here we were only interested in generating tests covering the input structures (black-box) and code (white- box), using an algebraic specication to create additional tests and check the functional requirements of the code is a straight-forward extension.
