Since many optimization phases before the register allocation including instruction scheduling [4], store-to-copy promotion [5], and static single assignment (SSA) translation [6] leave behind many copies that slow down program execution, it is essential to minimize those copies.
This paper proposes a new coalescing heuristic called optimistic coalescing which optimistically coalesces all pairs of non-interfering nodes as in Chaitin's heuristic, yet when a coalesced node needs to be spilled, the node is split back into two separate nodes, giving up the coalescing.
Chaitin's allocator repeatedly removes low-degree nodes and their associated edges from the graph and pushes the nodes on top of the stack in the simplify phase until either the graph is empty or every node in the graph is significant.
On the other hand, if a node interferes with both nodes being coalesced, the degree of the node is reduced by one, which may expose further opportunities for simplifying the graph.
When all non-copy-related nodes are significant-degree nodes and no two copy- related nodes are coalescible any more, the allocator freezes one of low-degree, copy-related nodes, if there is any.
When we have to split a coalesced node xyz, we first split it into three individual nodes x, y, and z and check if each can be colored individually; those nodes that cannot be colored are spilled right away at this point.
Regarding the spatial overhead of optimistic coa- lescing, the allocator should keep the information on the original interference edges of those nodes being coalesced due to possibility of live range splitting (it is freed right after coalescing in other heuristics).
It has never been evaluated separately how aggressive coalescing does compared to conservative coalescing in the context of optimistic allocation, whereas iterated coalescing, the only recent research work on coalescing, has focused only on improving conservative coalescing.
