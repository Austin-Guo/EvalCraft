The convex hull of S is the minimal convex region that contains every point of S. From this denition, it follows that the convex hull of S is a convex polygon whose vertices are points of S.
The same authors show that, on algebraic decision trees of any xed order, (n log h) is a lower bound for computing convex hulls of sets of n points having convex hulls with h vertices.
The constants in the running time of Graham-InPlace-Hull can be improved by rst nding the extreme points a and b and using these points to partition the array into two parts, one that contains vertices that can only appear on the upper hull and one that contains vertices that can only appear on the lower hull.
Since Graham's scan performs only 2n - right-turn tests when computing the upper hull of n points having h points on the upper hull, the resulting algorithm performs at most 3n - h right-turn tests (the extra n comes from the initial partitioning step).
Upon close examination, the algorithm does not need to reorder the input and in fact works in-place, maintaining only two indices to scan both sets of lines, and two indices to remember the two lines making up the current optimal solution.
Therefore, if the slope of l is negative, then the solution to the linear programming problem is to the right of x 0 , otherwise the solution is to the left of In the rst case, we scan the pairs in the rst half: the line of smallest slope in each pair of the rst half can be discarded since to the right of x 0 it is always below its paired line and hence cannot dene the solution.
Figure  6 recaps the algorithm for computing the upper hull of S. First the algorithm computes the median abscissa x 0 of S, and the upper bridge pq by using the dual of the algorithm Megiddo- InPlace-LP-2D.
Some problems that immediately come to mind are those of computing k-piercings of sets, nding maximum cliques in intersection graphs, computing largest empty disks, and nding ham-sandwich cuts.
