Finding hypergraph transversals has applications in many areas, for example artificial intelligence and database theory [4].
There is a close connection between computing the set of all minimal transversals T r(H) of a hypergraph H and the data mining problem of This research is partially supported by CUGS - National Graduate School in Computer Science, Sweden.
Solving for q, we get one positive solution, and using this solution we get: 6k , and note that the condition that qn is an integer is equivalent to the condition that f(k)\Deltan is an integer.
A detailed comparison can of course not be given without a more thorough review of his paper and the problem he is solving, but expressed roughly, where we account for 2-edges according to a non-linear function and have a complexity analysis where only local analysis of each recursion is performed, Kullmann accounts for short clauses (corresponding to our 2-edges) linearly, and instead uses a complicated non-local analysis to get a good upper bound.
The only situation which might temporarily increase F (H) is when some 2-edges are removed by case 1, but this can only occur if H contains at least one loop, and if so, then case will reduce n(H) afterwards, resulting in a reduction of F (H) by at least Case 4: In this case, we need to examine in detail how n and k change in each branch of the branching.
In total, n the worst case for a particular q is always the case with a minimum k 0 . k Formula for branching number Branching number  Cases for case 4, subcase d 2 k Formula for branching number Branching number  Cases for case 4, subcase d 2 The resulting branchings can be divided into 3 cases.
There is one worst case branching for this case for every value of k, which is achieved when k 0 is minimal.
Consequently, their algorithm potentially takes O(1:6484 n ) in running time, regardless of caching, and if we want to find a better bound for the running time than this, we cannot use their algorithm in this version of our algorithm.
