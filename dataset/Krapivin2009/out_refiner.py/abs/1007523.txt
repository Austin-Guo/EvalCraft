Continuous testing uses excess cycles on a developer's workstation to continuously run regression tests in the background as the developer edits code.
The longer a regression error persists without being caught, the larger its drain on pro- ductivity: when the error is found, more code changes must be considered to find the changes that directly pertain to the error, the code changes are no longer fresh in the developer's mind, and new code written in the meanwhile may also need to be changed as part of the bug fix.
Running tests has a cost: remembering to run the tests, waiting for them to complete, and returning to the task at hand distract from development.
These observations permitted determination of the ignorance time between introduction of each regression error (in the developer's editor) and the developer becoming aware of the error (by running the test suite), and the fix time between the developer becoming aware of the error and fixing the error.
This text indicates the following states: the code cannot be compiled; regression errors have been introduced (tests that used to give correct answers no longer do); some tests are unimplemented (the tests have never completed correctly).
Years programming 2.8 2.9 0.5 14.0 Years Java programming 0.4 0.5 0.0 2.0 Years using Emacs 1.3 1.2 0.0 5.0 Years using a Java IDE 0.2 0.3 Frequencies Usual environment Unix 29%; Win 38%; both 33% Regression testing familiar 33%; not familiar 67% Used Emacs to compile at least once 62%; never 38% Used Emacs for Java at least once 17%; never 83%  Figure  1: Study participant demographics (N=22).
The mean frequency for manual testing (see Figure 5) among those who tested throughout was once every 20 minutes, which is longer than the mean time to pass an additional test during development possibly indicating that students were often writing code to pass several tests at a time before running the tests to confirm.
Continuous testing continuously runs regression tests in the background as the developer edits code and notifies the developer quickly when errors are discovered.
