Enforcing Security and Safety Models with an Information Flow Analysis Tool
ABSTRACT
Existing security models require that information of a given
security level be prevented from "leaking" into lower-security
information. High-security applications must be demonstrably
free of such leaks, but such demonstration may require
substantial manual analysis.
Other authors have argued
that the natural way to enforce these models automatically
is with information-flow analysis, but have not shown this to
be practicable for general purpose programming languages
in current use.
Modern safety-critical systems can contain software components
with differing safety integrity levels, potentially operating
in the same address space. This case poses problems
similar to systems with differing security levels; failure to
show separation of data may require the entire system to be
validated at the higher integrity level.
In this paper we show how the information flow model
enforced by the SPARK Examiner provides support for enforcing
these security and safety models. We describe an
extension to the SPARK variable annotations which allows
the specification of a security or safety level for each state
variable, and an extension to the SPARK analysis which
automatically enforces a given information flow policy on a
SPARK program.
Categories and Subject Descriptors
D2.4 [Software Engineering]: Software/Program verification
; F3.1 [Logics and Meanings of Programs]: Specifying
and verifying and reasoning about programs
General Terms
Design,Measurement,Security,Verification
