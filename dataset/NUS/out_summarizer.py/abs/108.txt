Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page.
The existing
sequential mining algorithms are not suitable for handling
this situation because the result mined from the old
database is no longer valid on the updated database, and it
is intolerably inefficient to mine the updated databases from
scratch.
This is because not only the appended items
may generate new locally frequent sequences in db, but
also that locally infrequent sequences may contribute their
occurrence count to the same infrequent sequences in the
original database to produce frequent ones.
A sequence s = t
1
, t
2
, . . . , t
m
(t
i
I) is an ordered list.
Given a minimum support threshold,
min sup, a sequence is frequent if its support is no less
than min sup; given a factor u
1, a sequence is semi frequent
if its support is less than min sup but no less
than u
min sup; a sequence is infrequent if its support
is less than u
min sup.
We can see from the figure, as the increments
accumulate, the time for incremental mining increases, but
increase is very small and the incremental mining still outperforms
mining from scratch by a factor of 4 or 5.
Zhang et al. [14] developed two algorithms
for incremental mining sequential patterns when sequences
are inserted into or deleted from the original database.
The problem of this algorithm is (1) the candidate set can
be very huge, which makes the test phase very slow; and
(2) its level wise working manner requires multiple scans of
the whole database.
