It is widely
recognized that constraints facilitate describing geometric
layouts and behaviors of diagrams in 2D graphical user interfaces
such as drawing editors, and therefore constraint
solvers for this purpose have been extensively studied [3, 7,
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page.
It is,
however, insufficient in reality because of the essential difference
between the ways of specifying 2D and 3D graphics;
typical 2D graphics handles only simple coordinate systems,
whereas most 3D graphics requires multiple coordinate systems
with complex relations such as rotations to treat scene
graphs.
Solutions to constraint systems are defined as follows: let
e
i,j
(x) be the error function of the j th constraint (1  j
m
i
) at strength level i (0  i  l); then solutions v are
determined with the optimization problem
minimize
v
E(v) subject to e
0,j
(v) = 0 (1  j  m
0
)
95
where E is an objective function defined as
E(x) =
l
i=1
m
i
j=1
w
i
e
i,j
(x)
in which w
i
indicates the weight associated with strength i,
and the relation w
1
w
2
 . . .
w
l
holds.
For numerical optimization, we mainly use the quasi Newton
method based on Broyden Fletcher Goldfarb Sahnno updating
formula [2, 6], which is a fast iterative technique that
exhibits superlinear convergence.
However, this method requires an optimization routine
supporting required nonlinear constraints, which limits
the availability of actual techniques (in fact, we cannot
use the quasi Newton method for this purpose).
One possible direction is to extend
VRML [4] to support geometric constraints.
By contrast, constraint enabled
VRML will cover a wider range of applications without such
additional scripts.
Zhao, J., and Badler, N. I. Inverse kinematics
positioning using nonlinear programming for highly
articulated figures.
