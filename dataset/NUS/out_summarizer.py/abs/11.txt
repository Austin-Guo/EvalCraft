Krivine discovered an abstract machine from a logical
standpoint [25], and Cr'egut proved its correctness in reference to
a reduction strategy; he also generalized it from weak to strong
normalization [7].
Felleisen et al. invented
the CEK machine from an operational standpoint [16, 17, 19].
Hannan and Miller discovered the CLS machine from a proof theoretical
standpoint [23].
And recently, Rose presented a
method to construct abstract machines from reduction rules [32],
while Hardin, Maranget, and Pagano presented a method to extract
the reduction strategy of a machine by extracting axioms from its
transitions and structural rules from its architecture [24].
The warnings could be
avoided with an option type or with an explicit exception, at the
price of readability and direct relation to the usual mathematical
specifications of abstract machines.
To obtain the canonical definition of Krivine's abstract machine, we
abandon the distinction between denotable and expressible values
and we use thunks instead, we represent the defunctionalized continuation
as a list of thunks instead of a data type, and we inline
apply cont
.
structure Eval4
= struct
datatype thunk = THUNK of term * thunk list
(*
eval : term * thunk list * thunk list
*)
(*
 &gt; term * thunk list
*)
fun eval (IND n, e, s)
= let val (THUNK (t, e')) = List.nth (e, n)
in eval (t, e', s)
end
| eval (ABS t, e, nil)
= (ABS t, e)
| eval (ABS t, e, (t', e') :: s)
= eval (t, (THUNK (t', e')) :: e, s)
| eval (APP (t0, t1), e, s)
= eval (t0, e, (t1, e) :: s)
(*
main : term  &gt; term * thunk list
*)
fun main t
= eval (t, nil, nil)
end
The following proposition is straightforward to prove.
Using substitutions instead of environments or inlining one of the
standard computational monads (state, continuations, etc. [39]) in
the call by value evaluator yields variants of the CEK machine that
have been documented in the literature [16, Chapter 8].
Finally, we have exhibited the abstract machine
corresponding to the CAM, which puts the reader in a new
position to answer the recurrent question as to whether the CLS
machine is closer to the CAM or to the SECD machine.
