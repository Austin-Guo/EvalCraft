Felleisen et al. invented
the CEK machine from an operational standpoint [16, 17, 19].
Accordingly
, we distinguish between abstract machines and virtual machines
in the sense that virtual machines have an instruction set and
abstract machines do not; instead, abstract machines directly operate
on source terms and do not need a compiler from source terms to
instructions.
To obtain the canonical definition of Krivine's abstract machine, we
abandon the distinction between denotable and expressible values
and we use thunks instead, we represent the defunctionalized continuation
as a list of thunks instead of a data type, and we inline
apply cont
.
structure Eval4
= struct
datatype thunk = THUNK of term * thunk list
(*
eval : term * thunk list * thunk list
*)
(*
 &gt; term * thunk list
*)
fun eval (IND n, e, s)
= let val (THUNK (t, e')) = List.nth (e, n)
in eval (t, e', s)
end
| eval (ABS t, e, nil)
= (ABS t, e)
| eval (ABS t, e, (t', e') :: s)
= eval (t, (THUNK (t', e')) :: e, s)
| eval (APP (t0, t1), e, s)
= eval (t0, e, (t1, e) :: s)
(*
main : term  &gt; term * thunk list
*)
fun main t
= eval (t, nil, nil)
end
The following proposition is straightforward to prove.
For any ML value
p : term
denoting a program,
Eval1.main p
Eval3.main p
As in Section 2, this evaluator can be made compositional by refunctionalizing
the closures into higher order functions and by factoring
the resolution of de Bruijn indices into an auxiliary lookup
function.
We are grateful to Malgorzata Biernacka, Julia Lawall, and Henning
Korsholm Rohde for timely comments.
In Mitchell Wand, editor, Proceedings of the
1990 ACM Conference on Lisp and Functional Programming,
pages 333 340, Nice, France, June 1990.
In
David W. Wall, editor, Proceedings of the ACM SIGPLAN'93
Conference on Programming Languages Design and Imple mentation
, SIGPLAN Notices, Vol. 28, No 6, pages 237 247,
Albuquerque, New Mexico, June 1993.
In John Darlington, Peter Henderson, and
David A. Turner, editors, Functional Programming and its
Applications.
