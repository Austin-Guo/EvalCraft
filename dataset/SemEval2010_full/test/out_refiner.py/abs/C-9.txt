The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run time, thereby scaling from a single user local instance to a multidomain spanning scalable service.
To reduce the implementation effort of such services a framework has been developed that supports the run time evolution from a traditional client/server scenario to an active replicated server with clients interacting in a hybrid peer to peer architecture as known from Napster.
If the service environment has not reached its global limit and the node is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another node of the same service environment.
In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding resource usage and if this is not possible, stopping the service.
In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration.
In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.
For example if a client stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.
Article 5 6. RELATED WORK Grid infrastructures like the Globus Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve resource consuming and compute intensive tasks.
