One of the main operations in MMOG applications that stream 3D objects is to accurately calculate all objects that are visible to a user.
To address these challenges, we propose a method that identifies the most relevant visible objects from a given geometry database (view model) and then put forth a fast indexing method that computes the visible objects for each user (spatial indexing).
The basic idea of the Q+Rtree [14] is to separate indexing structures for quasistationary objects and moving objects: fast moving objects are indexed in a Quadtree and quasi stationary objects are stored in an R∗  tree.
Table 3: Update time cost for any single update event where v < mq, mo and q ∈ Q. indexing method queries ×(Ta + Td) (seconds) objects ×(Ta + Td) (seconds) node indexing with incremental update |Q| |O| · v(v+1){v(4m+3−v)+2(m+1)} (2v+1)2 single table edge indexing with full update |Q| |O| · 2(m + 1) single table edge indexing with incremental update |Q| |O| · v(4m(1+2v)+9v+5) (2v+1)2 two table edge indexing |Q| · Ta Ta+Td |O| · 2(m + 1) Ta Ta+Td Maximum Reachable Distance (v) (0,0) i j (i,j) A A AA B B B B Figure 5: Illustration of next cell location, cell(i, j), of a moving entity whose initial location was at cell (0, 0).
Another interesting result is that two table edge indexing depends only on the token insertion cost, Ta. Typically, Td is slightly 1 2 3 4 5 0 5 10 15 20 25 30 35 40 Maximum Reachable Distance (v) (%) #ofAffectedTokens Two−table Edge Indexing Incremental Edge Indexing Full Edge Indexing Incremental Node Indexing Figure 6: Simulation results of update complexity of different indexing methods.
Node indexing scans all entities and then collects the user entities indexed on every cell node.
The total elapsed time of full update based single table edge indexing for a given set of moving entities is the summation of the elapsed time of updates and cell evaluations: (Ta + Td + Ts) · {|Q| + |O|2(m + 1)} (7) Similarly, the total elapsed time of two table edge indexing is as follows: (Ta + Td + Ts) · {|Q| + |O|2(m + 1)} (8) From Equation 7 and 8 we conclude that two table edge indexing, even though it represents a minor optimization of single table edge indexing by replacing unpredictable Td with predictable Td, achieves a significant performance improvement.
In addition, twotable indexing is guaranteed to outperform single table full update edge indexing.
