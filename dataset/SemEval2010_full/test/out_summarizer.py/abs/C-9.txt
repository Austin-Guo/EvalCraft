The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run time, thereby scaling from a single user local instance to a multidomain spanning scalable service.
This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env. Home Environment Home Environment Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem.
This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph.
In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding resource usage and if this is not possible, stopping the service.
In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration.
In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.
The IDL extension consists of additional modifiers that affect code generation for client and server side.
For example if a client stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.
