Service Interface: A New Abstraction for Implementing and Composing Protocols∗ Olivier R¨utti Paweł T. Wojciechowski Andr´e Schiper Ecole Polytechnique F´ed´erale de Lausanne (EPFL) 1015 Lausanne, Switzerland {Olivier.
A protocol is a distributed algorithm that solves a specific problem in a distributed system, e.g. a TCP protocol solves the reliable channel problem.
Note that the network is represented as a special protocol module that handles the send event (to send a message to another machine) and triggers the deliver event (upon receipt of a message from another machine).
We explain now that service based frameworks provide a mechanism to preserve this link, while in event based frameworks, the lack of such mechanism leads to error prone composition.
Q1 Q1 R1 P1 1P 1newP 1 Repl−P1 Repl−P1 R newP1 gg h h" g" t Figure 5: Dynamic replacement of protocol P For the synchronization algorithms to work, module interactions are intercepted in order to detect a time when Pi should be replaced by newPi.
In this section, we describe the main two classes of our implementation: Service (encoding the Service Interface) and 694 service based event based Protocol Interaction an adequate an inadequate representation representation Protocol Composition clear and safe complex and error prone Dynamic Replacement an integrated ad hoc solutions mechanism Table 1: Service based vs. event based Protocol (encoding protocol modules).
In practice, if a protocol module Pi can issue a request to a protocol UDP, then it may also issue a request to TCP (compatible with UDP) due to the subtyping relation on parameters of communicating modules.
The GM module provides a group membership service that maintains consistent membership data among group members (see [19] for details).
