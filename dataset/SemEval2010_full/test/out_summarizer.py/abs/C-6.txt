The need for content management in this area is apparent when one consider the following: â€¢ Increases in the capacity and decreases in the cost of storage means that even modest desktop systems today have the ability to store massive amounts of content.
To address these issues we have designed and implemented the Spectrum content management system architecture.
For layers that reside on remote systems (e.g. a remote store) only the meta information needed to contact the remote 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Graphical User Interface Network Enabled DVR Program Information Content DVR Application Figure 2: Spectrum in a Network Enabled DVR node is stored locally.
While we are current transferring our XML encoded messages using a simple TCP connection, in a real world setting this can easily be replaced with an implementation based on secure sockets layer (SSL) to improve security by adding SSL as a transport protocol.
After one day the reference from the rolling window will be discarded, but the content will be 9 ref2, etc. base data url1 url2 (media files...) (media files...) meta store (general info...) url1 chunks prefs ranges media chunks, etc.url2 poly host ref1 ref1.files ref1.state Figure 4: Data layout of Spectrum policy store preserved by the second reference.
Unlike the Spectrum architecture which allows edge devices to operate in a largely autonomous fashion, the vendor solutions typically are more tightly coupled to a centralized controller and do not have the sophisticated time based operations offered by Spectrum.
Finally, the modular design of the Spectrum architecture allows both stand alone and distributed realizations so that the system can be deployed in a variety of applications.
Any project that helps allow multimedia content to be easily shared over the Internet will have legal hurdles to overcome before it can achieve widespread acceptance.
