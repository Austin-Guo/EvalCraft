In this paper, we propose a dynamic co allocation scheme based on co allocation Grid data transfer architecture called RecursiveAdjustment Co Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer performance [24].
A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.
The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.
The Aggressive Load Balancing dynamic co allocation strategy presented in [17] adds functions that change block size de liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.
Each server has a real time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].
Of course, this makes it necessary to maintain the original splitting order.
The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co Allocation that produce more blocks during data transfers.
The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers.
