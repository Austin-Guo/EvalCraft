We adopt the latter view and use task to also refer to goals.
We show how aborts can be smoothly introduced into a BDI style architecture, and for the first time we give an operational semantics for aborting in the abstract agent language CAN [23, 17].
In Section 2 we give an example of the consequences of aborting a task, and in Section 3 we discuss some circumstances under which aborts should occur, and the appropriate representation and invocation procedures.
The agent"s action upon plan failure depends on its nature: for example, the agent may declare the task to have failed if one plan has been tried and resulted in failure, or it may retry alternate plans and declare (indeed, must declare) task failure only if all possible alternate plans to perform the task have been tried and resulted in failure.
In order to understand how the agent"s abort processing should function, we consider three situations where it is sensible for an agent to consider aborting some of its tasks and plans: 1. When a task succeeds or fails because of an external factor other than the agent itself, the plan currently executed to perform the task should be aborted.
The assumption here is that, like the failure method, the programmer of the agent system has the opportunity to specify a sensible abort method that takes into consideration the point in the plan at which the abort is to be executed.
Such plans, similar to our failure methods, are designed for the agent to effect state changes (act to undo its earlier actions) prior to possibly attempting another plan to achieve the failed goal g. Given Jason"s constructs for dropping a goal with an indication of whether or not to try an alternate plan for it, HÂ¨ubner et al. [6] provide an informal description of how a Jason agent modifies its intention structure when a goal failure event occurs.
The work of the two authors at SRI International was supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No. NBCHD030010.
