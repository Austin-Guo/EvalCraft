One natural solution to this problem is to create a small index on a subset of the documents that are likely to be returned as the top results (by using, for example, the pruning techniques in [7, 20]) and compute the first batch of answers using the pruned index.
However, the two tier architecture may have a significant drawback in terms of its result quality compared to the full replication of IF ; given the fact that the p index contains only a subset of the data of the full index, it is possible that, for some queries, the p index may not contain the top ranked document according to the particular ranking criteria used by the search engine and fail to return it as the top page, leading to noticeable quality degradation in search results.
Thus, as long as search engines can compute the first few top k answers correctly, users often will not notice that the search engine actually has not computed the correct answer for the remaining results (unless the users explicitly request them).
Figure 7 describes this pruning policy more formally, where we sort all documents Di"s by their respective pr(Di) values and keep a Di in the p index when its Algorithm 4.4 Local document pruning V SL N: maximum size of a single posting list Procedure (1) Foreach I(ti) ∈ IF (2) Sort Di"s in I(ti) based on pr(Di) (3) If |I(ti)| ≤ N Then keep all Di"s (4) Else keep the top N Di"s with the highest pr(Di) Figure 8: Local document pruning based on pr.
In this case, because these documents have scores higher than the upper bound scores of any other documents, we know that no other documents can appear in the top k.
Then, from tr(Di, tj) ≤ τtj(1 ≤ j ≤ m) and the monotonicity assumption, 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 Fractionofqueriesguaranteed−f(s) Fraction of index − s Fraction of queries guaranteed per fraction of index queries guaranteed Figure 11: Fraction of guaranteed queries f(s) answered in a keyword pruned p index of size s. we know that r(Di) ≤ ¯r(Di).
Fraction of queries guaranteed for top 20 per fraction of index, using keyword and document 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 Keyword fraction of index   sh 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 Document fraction of index   sv 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 Fraction of queries guaranteed   f(s) Figure 15: Combining keyword and document pruning.
This thread of work is also orthogonal to ours because a caching scheme may operate on top of our p index in order to minimize the answer computation cost.
